{
  "Id": "ActionTemplates-321",
  "Name": "Create or configure IIS Sites, Vdirs, Applications and Pools",
  "Description": "Creates or Reconfigures IIS Sites, Vdirs, Applications and Pools",
  "ActionType": "Octopus.Script",
  "Version": 223,
  "CommunityActionTemplateId": null,
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "$appPoolNames = $OctopusParameters['AppPoolName'].Split(',')\n$appPoolIdentityType = $OctopusParameters['AppPoolIdentityType']\nif ($appPoolIdentityType -eq 3) {\n    $appPoolIdentityUser = $OctopusParameters['AppPoolIdentityUser']\n    $appPoolIdentityPassword = $OctopusParameters['AppPoolIdentityPassword']\n}\n$appPoolLoadUserProfile = [boolean]::Parse($OctopusParameters['AppPoolLoadUserProfile'])\n$appPoolAutoStart = [boolean]::Parse($OctopusParameters['AppPoolAutoStart'])\n$appPoolEnable32BitAppOnWin64 = [boolean]::Parse($OctopusParameters['AppPoolEnable32BitAppOnWin64'])\n$appPoolManagedRuntimeVersion = $OctopusParameters['AppPoolManagedRuntimeVersion']\n$appPoolManagedPipelineMode = $OctopusParameters['AppPoolManagedPipelineMode']\n$appPoolIdleTimeout = [TimeSpan]::FromMinutes($OctopusParameters['AppPoolIdleTimeoutMinutes'])\n$appPoolPeriodicRecycleTime = $OctopusParameters['AppPoolPeriodicRecycleTime']\n$appPoolMaxProcesses = [int]$OctopusParameters['AppPoolMaxProcesses']\n$appPoolRegularTimeInterval = [TimeSpan]::FromMinutes($OctopusParameters['AppPoolRegularTimeInterval'])\n$appPoolQueueLength = [int]$OctopusParameters['AppPoolQueueLength']\n$appPoolStartMode = $OctopusParameters['AppPoolStartMode']\n$appPoolCpuAction = $OctopusParameters['AppPoolCpuLimitAction']\n$appPoolCpuLimit = [int]$OctopusParameters['AppPoolCpuLimit']\n\n$webSiteNames = $OctopusParameters['WebSiteName'].Split(',')\n#$applicationPoolName = $OctopusParameters[\"ApplicationPoolName\"]\n$bindingProtocol = $OctopusParameters[\"BindingProtocol\"]\n$bindingPorts = $OctopusParameters[\"BindingPort\"].Split(',')\n$bindingIpAddresses = $OctopusParameters[\"BindingIpAddresses\"].Split(',')\n$bindingHost = $OctopusParameters[\"BindingHost\"]\n$bindingSslThumbprint = $OctopusParameters[\"BindingSslThumbprint\"]\n$webRoot = $OctopusParameters[\"WebRoot\"]\n$iisAuthentication = $OctopusParameters[\"IisAuthentication\"]\n$webSiteStart = $OctopusParameters[\"WebsiteStart\"]\n\n\n\n$virtualPath = $OctopusParameters['VirtualPath'].TrimStart('/',' ').TrimEnd('/',' ')\n$physicalPath = $OctopusParameters['PhysicalPath']\n$setApplicationPoolSettings = [boolean]::Parse($OctopusParameters['SetApplicationPoolSettings'])\n$appPoolFrameworkVersion = $OctopusParameters[\"ApplicationPoolFrameworkVersion\"]\n$applicationPoolIdentityType = $OctopusParameters[\"ApplicationPoolIdentityType\"]\n$applicationPoolUsername = $OctopusParameters[\"ApplicationPoolUsername\"]\n$applicationPoolPassword = $OctopusParameters[\"ApplicationPoolPassword\"]\n\n$parentSite = $OctopusParameters['ParentSite']\n#$bindingProtocols = $OctopusParameters['BindingProtocols']\n$authentication = $OctopusParameters['AuthenticationType']\n$requireSSL = $OctopusParameters['RequireSSL']\n$clientCertificate = $OctopusParameters['ClientCertificate']\n\n$preloadEnabled = [boolean]::Parse($OctopusParameters['PreloadEnabled'])\n$enableAnonymous = [boolean]::Parse($OctopusParameters['EnableAnonymous'])\n$enableBasic = [boolean]::Parse($OctopusParameters['EnableBasic'])\n$enableWindows = [boolean]::Parse($OctopusParameters['EnableWindows'])\n\n\n\n$application = $OctopusParameters['ApplicationName']\n$username = $OctopusParameters['Username']\n$password = $OctopusParameters['Password']\n$createPhysicalPath = $OctopusParameters['CreatePhysicalPath']\n$anonymousAuthentication = \"Anonymous\"\n$basicAuthentication = \"Basic\"\n$windowsAuthentication = \"Windows\"\n\n$iissiteid = $OctopusParameters['iissiteid'].split(\",\")\n\nfunction Validate-Parameter {\n    Param(\n        [Parameter(Position = 0)]\n        $Parameter,\n        [Parameter(Mandatory = $true, Position = 1)]\n        [string]$parameterName,\n        [string[]]$validInput\n\n    )\n    if (!$parameterName -contains 'Password') {\n        Write-Host ('{0}: {1}' -f ${parameterName}, $Parameter)\n    }\n    \n    \n   if (!$Parameter) {\n      if ( $Parameter.GetType().Name -ne \"Int32\") {\n          Write-Error ('No value was set for {0}, and it cannot be empty' -f $parameterName)\n      }\n    }\n    \n    Write-Host \"${parameterName}: ${Parameter}\"\n    if (! $Parameter) {\n        write-output \"$parameterName cannot be empty, please specify a value\"\n    }\n    \n    if ($validInput) {\n        @($Parameter) | % { \n            if ($validInput -notcontains $_) {\n                write-output \"'$_' is not a valid input for '$parameterName'\"\n            }\n        }  \n    } \n}\nfunction Execute-Retry {\n    Param(\n        [Parameter(Mandatory=$true, Position=0)][ScriptBlock]$Command\n    )\n$attemptCount = 0\n$operationIncomplete = $true\n    $maxFailures = 5\n    $sleepBetweenFailures = Get-Random -minimum 1 -maximum 4\nwhile ($operationIncomplete -and $attemptCount -lt $maxFailures) {\n$attemptCount = ($attemptCount + 1)\nif ($attemptCount -ge 2) {\nWrite-Output ('Waiting for {0} seconds before retrying ...' -f $sleepBetweenFailures)\nStart-Sleep -s $sleepBetweenFailures\nWrite-Output 'Retrying ...'\n}\ntry {\n& $Command\n$operationIncomplete = $false\n} catch [System.Exception] {\nif ($attemptCount -lt ($maxFailures)) {\nWrite-Output ('Attempt {0} of {1} failed: {2}' -f $attemptCount,$maxFailures,$_.Exception.Message)\n}\nelse {\n                Write-Host 'Failed to execute command'\n}\n}\n}\n}\n\nfunction Get-ScheduledTimes {\n    Param(\n        [Parameter(Position=0)][string]$Schedule\n    )\n    if (!$Schedule) {\n        return @()\n    }\n    $minutes = $Schedule.Split(',')\n    $minuteArrayList = New-Object System.Collections.ArrayList(,$minutes)\n    return $minuteArrayList\n}\n\n[System.Reflection.Assembly]::LoadFrom('C:\\windows\\system32\\inetsrv\\Microsoft.Web.Administration.dll')\nAdd-PSSnapin WebAdministration -ErrorAction SilentlyContinue\nImport-Module WebAdministration -ErrorAction SilentlyContinue\n\n\n\nValidate-Parameter -Parameter $appPoolName -ParameterName 'Application Pool Name'\nValidate-Parameter -Parameter $appPoolIdentityType -ParameterName 'Identity Type'\nif ($appPoolIdentityType -eq 3) {\n    Validate-Parameter -Parameter $appPoolIdentityUser -ParameterName 'Identity UserName'\n    # If using Group Managed Serice Accounts, the password should be allowed to be empty\n}\nValidate-Parameter -Parameter $appPoolLoadUserProfile -parameterName 'Load User Profile'\nValidate-Parameter -Parameter $appPoolAutoStart -ParameterName 'AutoStart'\nValidate-Parameter -Parameter $appPoolEnable32BitAppOnWin64 -ParameterName 'Enable 32-Bit Apps on 64-bit Windows'\nValidate-Parameter -Parameter $appPoolManagedRuntimeVersion -ParameterName 'Managed Runtime Version'\nValidate-Parameter -Parameter $appPoolManagedPipelineMode -ParameterName 'Managed Pipeline Mode'\nValidate-Parameter -Parameter $appPoolIdleTimeout -ParameterName 'Process Idle Timeout'\nValidate-Parameter -Parameter $appPoolMaxProcesses -ParameterName 'Maximum Worker Processes'\nValidate-Parameter -Parameter $appPoolStartMode -parameterName 'Start Mode'\nValidate-Parameter -Parameter $appPoolCpuAction -parameterName 'CPU Limit Action'\nValidate-Parameter -Parameter $appPoolCpuLimit -parameterName 'CPU Limit (percent)'\n\n$iis = (New-Object Microsoft.Web.Administration.ServerManager)\nforeach($appPoolName in $appPoolNames){\n$pool = $iis.ApplicationPools | Where-Object {$_.Name -eq $appPoolName} | Select-Object -First 1\nif ($pool -eq $null) {\n    Write-Output ('Creating Application Pool {0}' -f $appPoolName)\n    Execute-Retry {\n        $iis = (New-Object Microsoft.Web.Administration.ServerManager)\n        $iis.ApplicationPools.Add($appPoolName)\n        $iis.CommitChanges()\n    }\n}\nelse {\n    Write-Output ('Application Pool {0} already exists, reconfiguring ...' -f $appPoolName)\n}\n$list = Get-ScheduledTimes -Schedule $appPoolPeriodicRecycleTime\nExecute-Retry {\n    $iis = (New-Object Microsoft.Web.Administration.ServerManager)\n    $pool = $iis.ApplicationPools | Where-Object {$_.Name -eq $appPoolName} | Select-Object -First 1\n    Write-Output ('Setting: AutoStart = {0}' -f $appPoolAutoStart)\n    $pool.AutoStart = $appPoolAutoStart\n    Write-Output ('Setting: Enable32BitAppOnWin64 = {0}' -f $appPoolEnable32BitAppOnWin64)\n    $pool.Enable32BitAppOnWin64 = $appPoolEnable32BitAppOnWin64\n    Write-Output ('Setting: IdentityType = {0}' -f $appPoolIdentityType)\n    $pool.ProcessModel.IdentityType = $appPoolIdentityType\n    if ($appPoolIdentityType -eq 3) {\n        Write-Output ('Setting: UserName = {0}' -f $appPoolIdentityUser)\n        $pool.ProcessModel.UserName = $appPoolIdentityUser\n        if (!$appPoolIdentityPassword) {\n            Write-Output ('Setting: Password = [empty]')\n        }\n        else {\n            Write-Output ('Setting: Password = [Omitted For Security]')\n        }\n        $pool.ProcessModel.Password = $appPoolIdentityPassword\n    }\nWrite-Output ('Setting: LoadUserProfile = {0}' -f $appPoolLoadUserProfile)\n    $pool.ProcessModel.LoadUserProfile = $appPoolLoadUserProfile\n    Write-Output ('Setting: ManagedRuntimeVersion = {0}' -f $appPoolManagedRuntimeVersion)\n    if ($appPoolManagedRuntimeVersion -eq 'No Managed Code') {\n        $pool.ManagedRuntimeVersion = ''\n    }\n    else {\n        $pool.ManagedRuntimeVersion = $appPoolManagedRuntimeVersion\n    }\n    Write-Output ('Setting: ManagedPipelineMode = {0}' -f $appPoolManagedPipelineMode)\n    $pool.ManagedPipelineMode = $appPoolManagedPipelineMode\n    Write-Output ('Setting: IdleTimeout = {0}' -f $appPoolIdleTimeout)\n    $pool.ProcessModel.IdleTimeout = $appPoolIdleTimeout\n    Write-Output ('Setting: MaxProcesses = {0}' -f $appPoolMaxProcesses)\n    $pool.ProcessModel.MaxProcesses = $appPoolMaxProcesses\n    Write-Output ('Setting: RegularTimeInterval = {0}' -f $appPoolRegularTimeInterval)\n    $pool.Recycling.PeriodicRestart.Time  = $appPoolRegularTimeInterval\n    Write-Output ('Setting: QueueLength = {0}' -f $appPoolQueueLength)\n    $pool.QueueLength  = $appPoolQueueLength\n    Write-Output ('Setting: CPU Limit (percent) = {0}' -f $appPoolCpuLimit)\n    ## Limit is stored in 1/1000s of one percent\n    $pool.Cpu.Limit = $appPoolCpuLimit * 1000\n    Write-Output ('Setting: CPU Limit Action = {0}' -f $appPoolCpuAction)\n    $pool.Cpu.Action = $appPoolCpuAction\n    Write-Output ('Setting: Schedule = {0}' -f $appPoolPeriodicRecycleTime)\n    $pool.Recycling.PeriodicRestart.Schedule.Clear()\n    foreach($timestamp in $list) {\n        $pool.Recycling.PeriodicRestart.Schedule.Add($timestamp)\n    }\n    if (Get-Member -InputObject $pool -Name StartMode -MemberType Properties)\n    {\n        Write-Output ('Setting: StartMode = {0}' -f $appPoolStartMode)\n        $pool.StartMode = $appPoolStartMode\n    }\n    else\n    {\n        Write-Output ('IIS does not support StartMode property, skipping this property...')\n    }\n    $iis.CommitChanges()\n\n}\n\n}\n\n## --------------------------------------------------------------------------------------\n## Input\n## --------------------------------------------------------------------------------------\n\n## --------------------------------------------------------------------------------------\n## Helpers\n## --------------------------------------------------------------------------------------\n\n\n# Helper to run a block with a retry if things go wrong\n$maxFailures = 5\n$sleepBetweenFailures = Get-Random -minimum 1 -maximum 4\nfunction Execute-WithRetry([ScriptBlock] $command) {\n$attemptCount = 0\n$operationIncomplete = $true\n\nwhile ($operationIncomplete -and $attemptCount -lt $maxFailures) {\n$attemptCount = ($attemptCount + 1)\n\nif ($attemptCount -ge 2) {\nWrite-Output \"Waiting for $sleepBetweenFailures seconds before retrying...\"\nStart-Sleep -s $sleepBetweenFailures\nWrite-Output \"Retrying...\"\n}\n\ntry {\n& $command\n\n$operationIncomplete = $false\n} catch [System.Exception] {\nif ($attemptCount -lt ($maxFailures)) {\nWrite-Output (\"Attempt $attemptCount of $maxFailures failed: \" + $_.Exception.Message)\n\n}\nelse {\n   Write-Output \"Failed to execute command\"\n}\n}\n}\n}\n\n## --------------------------------------------------------------------------------------\n## Validate Input\n## --------------------------------------------------------------------------------------\n\nWrite-Output \"Validating paramters...\"\nValidate-Parameter $webSiteNames -parameterName \"Web Site Name\"\n#Validate-Parameter $applicationPoolName -parameterName \"Application Pool Name\"\nValidate-Parameter $bindingProtocol -validInput @(\"HTTP\",\"HTTPS\") -parameterName \"Protocol\"\nValidate-Parameter $bindingPort -parameterName \"Port\"\nif($bindingProtocol.ToLower() -eq \"https\") {\n    Validate-Parameter $bindingSslThumbprint -parameterName \"SSL Thumbprint\"\n}\nelse\n{\n    $bindingProtocol = \"HTTP\"\n}\n\n$enabledIisAuthenticationOptions = $iisAuthentication -split '\\s*[,;]\\s*'\n\nValidate-Parameter $enabledIisAuthenticationOptions -validInput @($anonymousAuthentication, $basicAuthentication, $windowsAuthentication) -parameterName \"IIS Authentication\"\n\n$enableAnonymous = $enabledIisAuthenticationOptions -contains $anonymousAuthentication\n$enableBasic = $enabledIisAuthenticationOptions -contains $basicAuthentication\n$enableWindows = $enabledIisAuthenticationOptions -contains $windowsAuthentication\n\n## --------------------------------------------------------------------------------------\n## Configuration\n## --------------------------------------------------------------------------------------\nif (! $webRoot) {\n$webRoot = (Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\InetStp' -name PathWWWRoot).PathWWWRoot\n}\n$webRoot = (resolve-path $webRoot).ProviderPath\nValidate-Parameter $webRoot -parameterName \"Relative Home Directory\"\n\n$wsBindings = new-object System.Collections.ArrayList\n$count = 0\nforeach($bindingPort in $bindingPorts){\n    \n    $bindingIpAddress = $bindingIpAddresses[$count]\n    $bindingInformation = \"${bindingIpAddress}:${bindingPort}:${bindingHost}\"\n\n    Add-PSSnapin WebAdministration -ErrorAction SilentlyContinue\n    Import-Module WebAdministration -ErrorAction SilentlyContinue\n\n    \n    $wsBindings.Add(@{ protocol=$bindingProtocol;bindingInformation=$bindingInformation }) | Out-Null\n    if (! [string]::IsNullOrEmpty($bindingSslThumbprint)) {\n        #$wsBindings.Add(@{ thumbprint=$bindingSslThumbprint }) | Out-Null\n    \n        $sslCertificateThumbprint = $bindingSslThumbprint.Trim()\n        Write-Output \"Finding SSL certificate with thumbprint $sslCertificateThumbprint\"\n    \n        $certificate = Get-ChildItem Cert:\\LocalMachine -Recurse | Where-Object { $_.Thumbprint -eq $sslCertificateThumbprint -and $_.HasPrivateKey -eq $true } | Select-Object -first 1\n        if (! $certificate) \n        {\n            Write-Output \"Could not find certificate under Cert:\\LocalMachine with thumbprint $sslCertificateThumbprint. Make sure that the certificate is installed to the Local Machine context and that the private key is available.\"\n        }\n\n        Write-Output (\"Found certificate: \" + $certificate.Subject)\n        \n#if ((! $bindingIpAddress) -or ($bindingIpAddress -eq '*')) \n#{\n#\t$bindingIpAddress = \"https://protect-us.mimecast.com/s/v9F5Cxk8v6H1A4Bls8VMJt?domain=0.0.0.0\"\n#}\n      \n$port = $bindingPort\n\n$sslBindingsPath = ($bindingIpAddress + \"!\" + $port + \"!\" + $bindingHost)\n\nExecute-WithRetry { \n$sslBinding = get-item $sslBindingsPath -ErrorAction SilentlyContinue\nif (! $sslBinding) {\nNew-Item $sslBindingsPath -Value $certificate | Out-Null\n} else {\nSet-Item $sslBindingsPath -Value $certificate | Out-Null\n}\t\n}\n }\n    do{\n        $count++\n      }\n    until($count -gt $bindingIpAddresses.count)\n}\n\n## --------------------------------------------------------------------------------------\n## Run\n## --------------------------------------------------------------------------------------\n\npushd IIS:\\\nforeach($appPoolName in $appPoolNames)\n{\n    $appPoolPath = (\"IIS:\\AppPools\\\" + $appPoolName)\n\n    Execute-WithRetry { \n       Write-Output \"Finding application pool $appPoolName\"\n $pool = Get-Item $appPoolPath -ErrorAction SilentlyContinue\nif (!$pool) { \nwrite-output \"Application pool $appPoolName does not exist\" \n}\n  }\n}\n\n\n$webSiteNames\n#[int]$id = $iissiteid\n#[int]$poolcount=0                                                                                                                                                                                                                                                                        \n\n#foreach($webSiteName in $webSiteNames)\nfor($poolcount=0;$poolcount -le $webSiteNames.count; $poolcount++)\n{\n    [int]$id = $iissiteid[$poolcount]\n    $webSiteName = $webSiteNames[$poolcount]\n    $sitePath = (\"IIS:\\Sites\\\" + $webSiteName)\n    if(!(Test-Path $sitePath))\n    {\n        New-Item -Path $physicalPath -Name $webSiteName -ItemType Directory -Force\n    }\n    Write-Output $sitePath\n\n    $site = Get-Item $sitePath -ErrorAction SilentlyContinue\n    if (!$site) { \n   Write-Output \"Creating web site $webSiteName\"\n        #Execute-WithRetry {\n        #Create an if statement here to take id if its within the script or take it from outside octopus paramaters\n\n   #$id = (dir iis:\\sites | foreach {$_.id} | sort -Descending | select -first 1) + 1\n        \n   new-item \"$sitePath\" -bindings $wsBindings[$poolcount] -id $id -physicalPath $webRoot -confirm:$false\n            \n            Write-Output \"Assigning website to application pool: $($appPoolNames[$poolcount])\"\n       Set-ItemProperty \"$sitePath\" -name applicationPool -value $appPoolNames[$poolcount]\n            \n            Write-Output \"Setting home directory: $webRoot\"\n       Set-ItemProperty \"$sitePath\" -name physicalPath -value \"$webRoot\"\n            \n            Write-Output \"Anonymous authentication enabled: $enableAnonymous\"\n   Set-WebConfigurationProperty -filter '/system.webServer/security/authentication/anonymousAuthentication' -name enabled -value \"$enableAnonymous\" -location $WebSiteName -PSPath \"IIS:\\\"\n\n            Write-Output \"Basic authentication enabled: $enableBasic\"\n   Set-WebConfigurationProperty -filter '/system.webServer/security/authentication/basicAuthentication' -name enabled -value \"$enableBasic\" -location $WebSiteName -PSPath \"IIS:\\\"\n\n            Write-Output \"Windows authentication enabled: $enableWindows\"\n   Set-WebConfigurationProperty -filter '/system.webServer/security/authentication/windowsAuthentication' -name enabled -value \"$enableWindows\" -location $WebSiteName -PSPath \"IIS:\\\"\n        #}\n    } else {\n   write-host \"Web site $webSiteName already exists\"\n    }\n\n    #$cmd = { \n   #Write-Output \"Assigning website to application pool: $($appPoolNames[$poolcount])\"\n   #Set-ItemProperty $sitePath -name applicationPool -value $appPoolNames[$poolcount]\n    #}\n    #Execute-WithRetry -Command $cmd\n\n    #Execute-WithRetry { \n   #Write-Output \"Setting home directory: $webRoot\"\n   #Set-ItemProperty $sitePath -name physicalPath -value \"$webRoot\"\n    #}\n\n    #try {\n   #Execute-WithRetry { \n   #Write-Output \"Anonymous authentication enabled: $enableAnonymous\"\n   #Set-WebConfigurationProperty -filter /system.webServer/security/authentication/anonymousAuthentication -name enabled -value \"$enableAnonymous\" -location $WebSiteName -PSPath \"IIS:\\\"\n   #}\n\n   #Execute-WithRetry { \n   #Write-Output \"Basic authentication enabled: $enableBasic\"\n   #Set-WebConfigurationProperty -filter /system.webServer/security/authentication/basicAuthentication -name enabled -value \"$enableBasic\" -location $WebSiteName -PSPath \"IIS:\\\"\n   #}\n\n   #Execute-WithRetry { \n   #Write-Output \"Windows authentication enabled: $enableWindows\"\n   #Set-WebConfigurationProperty -filter /system.webServer/security/authentication/windowsAuthentication -name enabled -value \"$enableWindows\" -location $WebSiteName -PSPath \"IIS:\\\"\n   #}\n    #} catch [System.Exception] {\n   #Write-Output \"Authentication options could not be set. This can happen when there is a problem with your application's web.config. For example, you might be using a section that requires an extension that is not installed on this web server (such as URL Rewriting). It can also happen when you have selected an authentication option and the appropriate IIS module is not installed (for example, for Windows authentication, you need to enable the Windows Authentication module in IIS/Windows first)\"\n   #throw\n    #}\n\n    # It can take a while for the App Pool to come to life\n    Start-Sleep -s 1\nforeach($appPoolName in $appPoolNames)\n    {\n    Execute-WithRetry { \n   $state = Get-WebAppPoolState $appPoolNames[$webSitecount]\n   if ($state.Value -eq \"Stopped\") {\n   Write-Output \"Application pool is stopped. Attempting to start...\"\n   Start-WebAppPool $appPoolNames\n   }\n      }\n}\n\n    if($webSiteStart -eq $true) {\n        Execute-WithRetry { \n       $state = Get-WebsiteState $webSiteName\n       if ($state.Value -eq \"Stopped\") {\n       Write-Output \"Web site is stopped. Attempting to start...\"\n       Start-Website $webSiteName\n       }\n        }\n    } else {\n   write-host \"Not starting Web site $webSiteName\"\n    }\n\n    popd\n\n    Write-Output \"IIS configuration complete\"\n    #$id++\n}\n\n\n## --------------------------------------------------------------------------------------\n## Input\n## --------------------------------------------------------------------------------------\n\n\n\n## --------------------------------------------------------------------------------------\n## Helpers\n## --------------------------------------------------------------------------------------\n# Helper to run a block with a retry if things go wrong\n$maxFailures = 5\n$sleepBetweenFailures = Get-Random -minimum 1 -maximum 4\nfunction Execute-WithRetry([ScriptBlock] $command) {\n    $attemptCount = 0\n    $operationIncomplete = $true\n\n    while ($operationIncomplete -and $attemptCount -lt $maxFailures) {\n        $attemptCount = ($attemptCount + 1)\n\n        if ($attemptCount -ge 2) {\n            Write-Output \"Waiting for $sleepBetweenFailures seconds before retrying...\"\n            Start-Sleep -s $sleepBetweenFailures\n            Write-Output \"Retrying...\"\n        }\n\n        try {\n            & $command\n\n            $operationIncomplete = $false\n        } catch [System.Exception] {\n            if ($attemptCount -lt ($maxFailures)) {\n                Write-Output (\"Attempt $attemptCount of $maxFailures failed: \" + $_.Exception.Message)\n            \n            }\n            else {\n                write-output \"Failed to execute command\"\n            }\n        }\n    }\n}\n\n## --------------------------------------------------------------------------------------\n## Configuration\n## --------------------------------------------------------------------------------------\n#Validate-Parameter $virtualPath -parameterName \"Virtual path\"\n#Validate-Parameter $physicalPath -parameterName \"Physical path\"\nif($virtualPath)\n{\n  Validate-Parameter $virtualPath -parameterName \"Virtual path\"\n}\nif($physicalPath)\n{\n  Validate-Parameter $physicalPath -parameterName \"Physical path\"\n}\nValidate-Parameter $appPoolNames -parameterName \"Application pool\"\nValidate-Parameter $parentSite -parameterName \"Parent site\"\n\n\nAdd-PSSnapin WebAdministration -ErrorAction SilentlyContinue\nImport-Module WebAdministration -ErrorAction SilentlyContinue\n\n\n## --------------------------------------------------------------------------------------\n## Run\n## --------------------------------------------------------------------------------------\n\nWrite-Host \"Getting web site $parentSite\"\n$site = Get-WebSite  | where { $_.Name -eq $parentSite }\nif (!$site) {\n    write-output \"The web site '$parentSite' does not exist. Please create the site first.\"\n}\n\n$path = $site.PhysicalPath;\n$parts = $virtualPath -split \"[/\\\\]\"\n$name = \"\"\n\nfor ($i = 0; $i -lt $parts.Length; $i++) {\n    $name = $name + \"/\" + $parts[$i]\n    $name = $name.TrimStart('/').TrimEnd('/')\n    if ($i -eq $parts.Length - 1) {\n        \n    }\n    elseif ([string]::IsNullOrEmpty($name) -eq $false -and $name -ne \"\") {\n        Write-Host \"Ensuring parent exists: $name\"\n        \n        $path = [IO.Path]::Combine($path, $parts[$i])\n        $app = Get-WebApplication -Name $name -Site $parentSite\n\n        if (!$app) {\n            $vdir = Get-WebVirtualDirectory -Name $name -site $parentSite\n            if (!$vdir) {\n                Write-Verbose \"The application or virtual directory '$name' does not exist\"\n                if([IO.Directory]::Exists([System.Environment]::ExpandEnvironmentVariables($path)) -eq $true)\n                {\n                    Write-Verbose \"Using physical path '$path' as parent\"\n                }\n                else\n                {\n                    Write-Output \"Failed to ensure parent\"\n                }\n            }\n            else\n            {\n                $path = $vdir.PhysicalPath\n            }\n        }\n        else\n        {\n            $path = $app.PhysicalPath\n        }\n    }\n}\n\n$existing = Get-WebApplication -site $parentSite -Name $name\n\n# Set App Pool\nforeach($appPoolName in $appPoolNames)\n{\nExecute-WithRetry { \nWrite-Verbose \"Loading Application pool\"\n$pool = Get-Item \"IIS:\\AppPools\\$appPoolName\" -ErrorAction SilentlyContinue\nif (!$pool) { \nWrite-Host \"Application pool `\"$appPoolName`\" does not exist, creating...\" \nnew-item \"IIS:\\AppPools\\$appPoolName\" -confirm:$false\n$pool = Get-Item \"IIS:\\AppPools\\$appPoolName\"\n} else {\nWrite-Host \"Application pool `\"$appPoolName`\" already exists\"\n}\n  }\n}\n\n# Set App Pool Identity\nforeach($appPoolName in $appPoolNames)\n{\nExecute-WithRetry { \nif($setApplicationPoolSettings)\n    {\n        Write-Host \"Set application pool identity: $applicationPoolIdentityType\"\n        if ($applicationPoolIdentityType -eq \"SpecificUser\") {\n            Set-ItemProperty \"IIS:\\AppPools\\$$appPoolName\" -name processModel -value @{identitytype=\"SpecificUser\"; username=\"$applicationPoolUsername\"; password=\"$applicationPoolPassword\"}\n        } else {\n            Set-ItemProperty \"IIS:\\AppPools\\$appPoolName\" -name processModel -value @{identitytype=\"$applicationPoolIdentityType\"}\n        }\n    }\n  }\n}\n\n# Set .NET Framework\nforeach($appPoolName in $appPoolNames)\n{\nExecute-WithRetry { \n    if($setApplicationPoolSettings)\n    {\n        Write-Host \"Set .NET framework version: $appPoolFrameworkVersion\" \n        if($appPoolFrameworkVersion -eq \"No Managed Code\")\n        {\n            Set-ItemProperty \"IIS:\\AppPools\\$appPoolName\" managedRuntimeVersion \"\"\n        }\n        else\n        {\n            Set-ItemProperty \"IIS:\\AppPools\\$appPoolName\" managedRuntimeVersion $appPoolFrameworkVersion\n        }\n     }\n   }\n }\n\nforeach($appPoolName in $appPoolNames)\n{\nExecute-WithRetry { \n    ## Check if the physical path exits\n    if(!(Test-Path -Path $physicalPath)) {\n        Write-Host \"Creating physical path '$physicalPath'\"\n        New-Item -ItemType directory -Path $physicalPath\n    }\n\n    if (!$existing) {\n        Write-Host \"Creating web application '$name'\"\n        New-WebApplication -Site $parentSite -Name $name -ApplicationPool $appPoolName -PhysicalPath $physicalPath\n        Write-Host \"Web application created\"\n    } else {\n        Write-Host \"The web application '$name' already exists. Updating physical path:\"\n\n        Set-ItemProperty IIS:\\\\Sites\\\\$parentSite\\\\$name -name physicalPath -value $physicalPath\n        Write-Host \"Physical path changed to: $physicalPath\"\n\n        Set-ItemProperty IIS:\\\\Sites\\\\$parentSite\\\\$name -Name applicationPool -Value $appPoolName\n        Write-Output \"ApplicationPool changed to: $appPoolName\"\n    }\n    \n    Write-Host \"Enabling '$bindingProtocol' protocols\"\n    Set-ItemProperty IIS:\\\\Sites\\\\$parentSite\\\\$name -name enabledProtocols -value $bindingProtocol\n\n    $enabledIisAuthenticationOptions = $Authentication -split '\\\\s*[,;]\\\\s*'\n\n    try {\n\n    Execute-WithRetry { \n        Write-Output \"Anonymous authentication enabled: $enableAnonymous\"\n        Set-WebConfigurationProperty -filter /system.webServer/security/authentication/anonymousAuthentication -name enabled -value \"$enableAnonymous\" -PSPath IIS:\\\\ -location $parentSite/$virtualPath\n    }    \n    \n    Execute-WithRetry { \n        Write-Output \"Windows authentication enabled: $enableWindows\"\n        Set-WebConfigurationProperty -filter /system.WebServer/security/authentication/windowsAuthentication -name enabled -value \"$enableWindows\" -PSPath IIS:\\\\ -location $parentSite/$virtualPath\n    }\n\n    Execute-WithRetry { \n        Write-Output \"Basic authentication enabled: $enableBasic\"\n        Set-WebConfigurationProperty -filter /system.webServer/security/authentication/basicAuthentication -name enabled -value \"$enableBasic\" -PSPath IIS:\\\\ -location $parentSite/$virtualPath\n    }\n\n    } catch [System.Exception] {\n        Write-Output \"Authentication options could not be set. This can happen when there is a problem with your application's web.config. For example, you might be using a section that requires an extension that is not installed on this web server (such as URL Rewriting). It can also happen when you have selected an authentication option and the appropriate IIS module is not installed (for example, for Windows authentication, you need to enable the Windows Authentication module in IIS/Windows first)\"\n        #throw\n    }\n\n    Set-WebConfiguration -value \"None\" -filter \"system.webserver/security/access\" -location $parentSite/$virtualPath -PSPath IIS:\\\\ \n    if ($requireSSL -ieq \"True\")\n    {\n        Write-Output \"Require SSL enabled: $requireSSL\"\n        Set-WebConfiguration -value \"Ssl\" -filter \"system.webserver/security/access\" -location $parentSite/$virtualPath -PSPath IIS:\\\\ \n        Write-Output \"Client certificate mode: $clientCertificate\"\n        if ($clientCertificate -ieq \"Accept\") {\n           Set-WebConfigurationProperty -filter \"system.webServer/security/access\" -location $parentSite/$virtualPath -PSPath IIS:\\\\ -name \"sslFlags\" -value \"Ssl,SslNegotiateCert\"\n        }\n        if ($clientCertificate -ieq \"Require\") {\n           Set-WebConfigurationProperty -filter \"system.webServer/security/access\" -location $parentSite/$virtualPath -PSPath IIS:\\\\ -name \"sslFlags\" -value \"Ssl,SslNegotiateCert,SslRequireCert\"\n        }\n    }\n    \n    try {\n        Set-ItemProperty IIS:\\\\Sites\\\\$parentSite\\\\$name -name preloadEnabled -value $preloadEnabled\n        Write-Output \"Preload Enabled: $preloadEnabled\"\n    } catch [System.Exception] {\n       if ($preloadEnabled) {\n            Write-Output \"Preload Enabled: $preloadEnabled Could not be set. You may to install the Application Initialization feature\"\n            #throw\n       }\n    }\n  }\n}\n\n\n\n\n## --------------------------------------------------------------------------------------\n## Helpers\n## --------------------------------------------------------------------------------------\n# Helper for validating input parameters\nfunction Confirm-Parameter([string]$parameterInput, [string[]]$validInput, $parameterName) {\n    Write-Host \"${parameterName}: $parameterInput\"\n    if (! $parameterInput) {\n        write-output \"No value was set for $parameterName, and it cannot be empty\"\n    }\n\n    if ($validInput) {\n        if (! $validInput -contains $parameterInput) {\n            Write-Output \"'$input' is not a valid input for '$parameterName'\"\n        }\n    }\n\n}\n\n# Helper to run a block with a retry if things go wrong\n$maxFailures = 5\n$sleepBetweenFailures = Get-Random -minimum 1 -maximum 4\nfunction Invoke-CommandWithRetry([ScriptBlock] $command) {\n    $attemptCount = 0\n    $operationIncomplete = $true\n\n    while ($operationIncomplete -and $attemptCount -lt $maxFailures) {\n        $attemptCount = ($attemptCount + 1)\n\n        if ($attemptCount -ge 2) {\n            Write-Output \"Waiting for $sleepBetweenFailures seconds before retrying...\"\n            Start-Sleep -s $sleepBetweenFailures\n            Write-Output \"Retrying...\"\n        }\n\n        try {\n            & $command\n\n            $operationIncomplete = $false\n        } catch [System.Exception] {\n            if ($attemptCount -lt ($maxFailures)) {\n                Write-Output (\"Attempt $attemptCount of $maxFailures failed: \" + $_.Exception.Message)\n\n            }\n            else {\n                write-output \"Failed to execute command\"\n            }\n        }\n    }\n}\n\n## --------------------------------------------------------------------------------------\n## Configuration\n## --------------------------------------------------------------------------------------\nConfirm-Parameter $virtualPath -parameterName \"Virtual path\"\nConfirm-Parameter $physicalPath -parameterName \"Physical path\"\nConfirm-Parameter $parentSite -parameterName \"Parent site\"\n\nif (![string]::IsNullOrEmpty($application)) {\n    $application = $application.TrimStart('/',' ').TrimEnd('/',' ')\n}\n\nAdd-PSSnapin WebAdministration -ErrorAction SilentlyContinue\nImport-Module WebAdministration -ErrorAction SilentlyContinue\n\n\n## --------------------------------------------------------------------------------------\n## Run\n## --------------------------------------------------------------------------------------\n\nWrite-Host \"Getting web site $parentSite\"\n$site = Get-Website -name $parentSite\nif (!$site) {\n    Write-Output \"The web site '$parentSite' does not exist. Please create the site first.\"\n}\n\n$virtualFullPath = $virtualPath\n\nif ($application) {\n    Write-Host \"Verifying existance of application $application\"\n    $app = Get-WebApplication -site $parentSite -name $application\n    if (!$app) {\n        Write-Output \"The application '$parentSite' does not exist. Please create the application first.\"\n    } else {\n        $virtualFullPath = $application + '/' + $virtualPath\n    }\n}\n\n# If the physical path down not exist and $createPhysicalPath is true,\n# then attempt create it, otherwise throw an error.\nif (!(Test-Path $physicalPath)) {\n    if ($createPhysicalPath) {\n        try {\n            Write-Host \"Attempting to create physical path '$physicalPath'\"\n            New-Item -Type Directory -Path $physicalPath -Force\n        } catch {\n            write-output \"Couldn't create physical path!\"\n        }\n    } else {\n        Write-Output \"Physical path does not exist!\"\n    }\n}\n\n# This needs to be improved, especially given applications can be nested.\nif ($application) {\n    $existing = Get-WebVirtualDirectory -site $parentSite -Application $application -Name $virtualPath\n} else {\n    $existing = Get-WebVirtualDirectory -site $parentSite -Name $virtualPath\n}\n\nInvoke-CommandWithRetry {\n\n    $virtualDirectoryPath = \"IIS:\\Sites\\$parentSite\\$virtualFullPath\"\n\n    if (!$existing) {\n        Write-Host \"Creating virtual directory '$virtualPath'\"\n\n        New-Item $virtualDirectoryPath -type VirtualDirectory -physicalPath $physicalPath\n\n        Write-Host \"Virtual directory created\"\n    }\n    else {\n        Write-Host \"The virtual directory '$virtualPath' already exists. Checking physical path.\"\n\n        $currentPath = (Get-ItemProperty $virtualDirectoryPath).physicalPath\n        Write-Host \"Physical path currently set to $currentPath\"\n\n        if ([string]::Compare($currentPath, $physicalPath, $True) -ne 0) {\n            Set-ItemProperty $virtualDirectoryPath -name physicalPath -value $physicalPath\n            Write-Host \"Physical path changed to $physicalPath\"\n        }\n    }\n\n    ## Set vdir pass-through credentails, if applicable\n    if (![string]::IsNullOrEmpty($username) -and ![string]::IsNullOrEmpty($password)) {\n        Write-Host \"Setting Pass-through credentials for username '$username'\"\n\n        Set-ItemProperty $virtualDirectoryPath -Name userName -Value $username\n        Set-ItemProperty $virtualDirectoryPath -Name password -Value $password\n\n        Write-Host \"Pass-through credentials set\"\n    }\n}",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline"
  },
  "Parameters": [
    {
      "Id": "e2bd4868-81ba-4a6c-9b6b-eb6ecf281f67",
      "Name": "WebsiteName",
      "Label": "Website name",
      "HelpText": "The display name of the IIS website to create.\n\nExample: Default Web Site",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "594f1bd9-9b35-4904-89cd-d6fd8abf016f",
      "Name": "WebRoot",
      "Label": "Relative home directory",
      "HelpText": "The directory which will be used as the home directory of the IIS website. This should be bound to the installation directory of a previous step.\n\nExample: C:\\inetpub\\wwwroot",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": "526b0500-2b4c-4b65-a024-e4230efbca1f",
      "Name": "AppPoolName",
      "Label": "Application pool name",
      "HelpText": "The name of the application pool that the application will run under.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "bbdad9c5-0fa2-45c4-b2c4-824b1eaec32e",
      "Name": "BindingProtocol",
      "Label": "Protocol",
      "HelpText": "The protocol to use for the new website",
      "DefaultValue": "http",
      "DisplaySettings": {
        "Octopus.ControlType": "Select"
      }
    },
    {
      "Id": "7a68b7f1-10ad-4413-9aeb-9a80e7348a9f",
      "Name": "BindingPort",
      "Label": "Port",
      "HelpText": "The port to use for the new website",
      "DefaultValue": "80",
      "DisplaySettings": {}
    },
    {
      "Id": "0eb30073-d12c-4e53-89fe-2965e444b6b3",
      "Name": "BindingIpAddresses",
      "Label": "IP address",
      "HelpText": "The IP address to use for the new website",
      "DefaultValue": "*",
      "DisplaySettings": {}
    },
    {
      "Id": "2fa9b243-398b-418e-b1d8-8bae60904f87",
      "Name": "BindingHost",
      "Label": "Host Header",
      "HelpText": "The host name to use for the new website\n\nExample: company.example.com",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": "dbc337c3-b1d3-4970-af0d-9ff419998fad",
      "Name": "WebsiteStart",
      "Label": "Start the Website",
      "HelpText": "Uncheck if you don't want the website started after it is created.",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "990348bc-97fa-4aaf-a5c5-9b9f44633351",
      "Name": "AppPoolIdentityType",
      "Label": "Identity Type",
      "HelpText": "The type of identity that the application pool will be using.",
      "DefaultValue": "3",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "0|Local System\n1|Local Service\n2|Network Service\n3|Specific User...\n4|Application Pool Identity"
      }
    },
    {
      "Id": "50c3d5e0-8cf9-42aa-942e-bb4378e8233f",
      "Name": "AppPoolIdentityUser",
      "Label": "Specific User Name",
      "HelpText": "_(Specific User)_ The user name to use with the application pool identity.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "a2e95603-a65d-4d6a-bc82-b467de4b8a21",
      "Name": "AppPoolIdentityPassword",
      "Label": "Specific User Password",
      "HelpText": "_(Specific User)_ The password for the specific user to use with the application pool identity.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "581dab29-045b-4832-9972-d6738c7fb529",
      "Name": "AppPoolLoadUserProfile",
      "Label": "Load User Profile",
      "HelpText": "This setting specifies whether IIS loads the user profile for an application pool identity.",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "0d4eec7d-3ec0-4f2b-b6ca-2131812435f5",
      "Name": "AppPoolEnable32BitAppOnWin64",
      "Label": "Enable 32-Bit Applications",
      "HelpText": "Allows the application pool to run 32-bit applications when running on 64-bit windows.",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "65cbcba2-97a1-4b8b-ada7-c519279b0c57",
      "Name": "AppPoolAutoStart",
      "Label": "Start Automatically",
      "HelpText": "Automatically start the application pool when the application pool is created or whenever IIS is started.",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "cb108766-cf01-444c-8b72-478ee79fb4a8",
      "Name": "BindingSslThumbprint",
      "Label": "Thumbprint",
      "HelpText": "The thumbprint of the SSL certificate to use for the new website when using the HTTPS protocol\n\nExample: 7c003ac253aa41e89976f139c11edd7b",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": "5df997e8-a152-4357-bb10-c15d705a3938",
      "Name": "AppPoolManagedRuntimeVersion",
      "Label": "Managed Runtime Version",
      "HelpText": "Specifies the CLR version to be used by the application pool.",
      "DefaultValue": "v4.0",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "v1.1|CLR v1.1 (.NET 1.0, 1.1)\nv2.0|CLR v2.0 (.NET 2.0, 3.0, 3.5)\nv4.0|CLR v4.0 (.NET 4.0, 4.5, 4.6)\nNo Managed Code|No Managed Code (ASP.NET Core)"
      }
    },
    {
      "Id": "992a2604-83df-4657-bc23-a644bc74703d",
      "Name": "AppPoolManagedPipelineMode",
      "Label": "Managed Pipeline Mode",
      "HelpText": "Specifies the request-processing mode that is used to process requests for managed content.",
      "DefaultValue": "0",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "0|Integrated\n1|Classic"
      }
    },
    {
      "Id": "afc98ebe-5179-4664-88cb-ae33920221c7",
      "Name": "AppPoolIdleTimeoutMinutes",
      "Label": "Process Idle Timeout",
      "HelpText": "Amount of time (in minutes) a worker process will remain idle before it shuts down. A value of 0 means the process does not shut down after an idle timeout.",
      "DefaultValue": "20",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "66dddc1b-aea0-4587-be99-3bb86d9dc274",
      "Name": "AppPoolMaxProcesses",
      "Label": "Maximum Worker Processes",
      "HelpText": "Maximum number of worker processes permitted to service requests for the application pool.",
      "DefaultValue": "1",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "8a17ebe3-fb2f-4c9e-809f-6e2a75af9f56",
      "Name": "AppPoolRegularTimeInterval",
      "Label": "Regular Time Interval",
      "HelpText": "Period of time (in minutes) after which an application pool will recycle. A value of 0 means the application pool does not recycle on a regular interval.",
      "DefaultValue": "1740",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "a7633619-8aa0-43a2-a122-28e63f7e2718",
      "Name": "AppPoolPeriodicRecycleTime",
      "Label": "Application pool periodic recycle time",
      "HelpText": "A specific local time, in minutes after midnight, when the application pool is recycled. Separate multiple times by using a ,\\n\\nExample: \\\"00:30:00\\\" for half an hour past midnight. or \\\"06:00:00\\\" for midnight and 6 am.",
      "DefaultValue": "03:00:00",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "933f6421-a462-4f26-a875-bd43a4b756f2",
      "Name": "AppPoolQueueLength",
      "Label": "Queue Length",
      "HelpText": "Maximum number of requests that HTTP.sys will queue for the application pool. When the queue is full, new requests receive a 504 \"Service Unavailable\" response.",
      "DefaultValue": "1000",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "233eccda-8179-4082-970c-06817fbefcb2",
      "Name": "AppPoolStartMode",
      "Label": "Start Mode",
      "HelpText": "Specifies whether the application pool should run in On Demand Mode or Always Running Mode.",
      "DefaultValue": "OnDemand",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "OnDemand|On Demand\nAlwaysRunning|Always Running"
      }
    },
    {
      "Id": "85a65ec4-6fa3-4719-8c8b-cce9ad327cff",
      "Name": "AppPoolCpuLimit",
      "Label": "CPU Limit (percent)",
      "HelpText": "Configures the maximum percentage of CPU time (in percent) that the worker processes in an application pool are allowed to consume over a period of time as indicated by the resetInterval attribute. If the limit set by the limit attribute is exceeded, an event is written to the event log and an optional set of events can be triggered. These optional events are determined by the action attribute.\n\nThe default value is 0, which disables CPU limiting.",
      "DefaultValue": "0",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "9f01df76-ad42-408a-9804-8a6ddbcdf3ee",
      "Name": "AppPoolCpuLimitAction",
      "Label": "CPU Limit Action",
      "HelpText": "Configures the action that IIS takes when a worker process exceeds its configured CPU limit. The action attribute is configured on a per-application pool basis.\n\nThe action attribute can be one of the following possible values. The default value is NoAction.",
      "DefaultValue": "0",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "0|NoAction\n1|KillW3wp\n2|Throttle\n3|ThrottleUnderLoad"
      }
    },
    {
      "Id": "80b44266-a665-47e4-8555-f5ec5808c840",
      "Name": "IisAuthentication",
      "Label": "IIS Authentication",
      "HelpText": "The authentication mode to use for the new website (can be Anonymous, Basic or Windows), specify multiple modes by entering the modes required separated by a ',' or ';'",
      "DefaultValue": "Anonymous",
      "DisplaySettings": {}
    },
    {
      "Id": "cbb8015e-20ad-4ba2-b94d-af644007e075",
      "Name": "VirtualPath",
      "Label": "Virtual path",
      "HelpText": "The name of the application to create. For example, to serve an application that will be available at `/myapp`, enter `myapp`. To create an application under a parent virtual directory or application, separate with slashes - for example: `/applications/myapp`",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "0d4a7fc4-ff96-4977-807a-6895c8ca90ed",
      "Name": "PhysicalPath",
      "Label": "Physical path",
      "HelpText": "Physical folder that the application will serve files from. Example: `C:\\MyApp`.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "36549c33-608e-4f04-a63c-bb5b4a75e273",
      "Name": "ParentSite",
      "Label": "Parent site",
      "HelpText": "The name of the IIS web site to attach the application to. For example, to put the application under the default web site, enter:\n\n    Default Web Site",
      "DefaultValue": "#{WebsiteName}",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "ea37d312-7593-4ddd-b16a-71c5124e70b6",
      "Name": "RequireSSL",
      "Label": "Require SSL",
      "HelpText": null,
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "5e5b9e70-9a50-4781-aff7-256e5a4706cf",
      "Name": "ClientCertificate",
      "Label": "Client certificate",
      "HelpText": "_(Require SSL)_ Defines how to handle client certificates if SSL is required.",
      "DefaultValue": "Ignore",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "Ignore\nAccept\nRequire"
      }
    },
    {
      "Id": "c0fe5333-4f9c-4978-bf94-5db61be262da",
      "Name": "PreloadEnabled",
      "Label": "Preload Enabled",
      "HelpText": "If true, sets the application to enable preloading.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "df3d8581-9323-4ca0-8618-d938a1783046",
      "Name": "EnableAnonymous",
      "Label": "Enable Anonymous authentication",
      "HelpText": "Whether IIS should allow anonymous authentication",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "3568cbcd-fba8-4e3e-bfa1-a6605cee9a53",
      "Name": "EnableBasic",
      "Label": "Enable Basic authentication",
      "HelpText": "Whether IIS should allow basic authentication with a 401 challenge.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "1a443824-a7d0-4ce0-ad70-2dd0a0e9408f",
      "Name": "EnableWindows",
      "Label": "Enable Windows authentication",
      "HelpText": "Whether IIS should allow integrated Windows authentication with a 401 challenge.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "1414928c-b64c-4775-9d4c-7cd63c8b2b02",
      "Name": "SetApplicationPoolSettings",
      "Label": "Set Application Pool Settings",
      "HelpText": "If true, this will allow you to set the Application Pool CLR Version, identity using the .NET CLR Version, Identity, Username, and Password parameters.  If false, the other four parameters will be ignored.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "74a2e4ce-e854-4093-80fc-3747cd454fef",
      "Name": "ApplicationPoolFrameworkVersion",
      "Label": "Application Pool .NET CLR Version",
      "HelpText": "The version of the .NET common language runtime that this application pool will use.",
      "DefaultValue": "v4.0",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "v2.0|CLR v2.0 (.NET 2.0, 3.0, 3.5)\nv4.0|CLR v4.0 (.NET 4.0, 4.5, 4.6)\nNo Managed Code"
      }
    },
    {
      "Id": "56025a0b-ab85-4df9-98f7-0f284d401062",
      "Name": "ApplicationPoolIdentityType",
      "Label": "Application Pool Identity",
      "HelpText": "Which built-in account will the application pool run under.",
      "DefaultValue": "ApplicationPoolIdentity",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "ApplicationPoolIdentity|Application Pool Identity\nLocalService|Local Service\nLocalSystem|Local System\nNetworkService|Network Service\nSpecificUser|Custom user ..."
      }
    },
    {
      "Id": "f15132f9-4454-4c36-992f-94b822084d42",
      "Name": "ApplicationPoolUsername",
      "Label": "Application Pool Username",
      "HelpText": "The Windows/domain account of the custom user that the application pool will run under. Example: YOURDOMAIN\\\\YourAccount. You will need to ensure that this user has permissions to run as an application pool.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "07cb3fd2-df37-4553-8148-36e510f3bff0",
      "Name": "ApplicationPoolPassword",
      "Label": "Application Pool Password",
      "HelpText": "The password for the custom account given above.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "32aa9314-3c87-49dc-ae22-79110930db63",
      "Name": "ApplicationName",
      "Label": "Application",
      "HelpText": null,
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "e8a66ccf-8364-463f-bd58-e5d98d9d3c87",
      "Name": "VirtualPhysicalPath",
      "Label": "VirtualPhysicalPath",
      "HelpText": null,
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "c39b207a-2c35-46ce-8aad-1f0c74cca12a",
      "Name": "CreatePhysicalPath",
      "Label": "Create Physical Path (If not exists)",
      "HelpText": "Create the physical path if it does not exist.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "4f998c2f-8320-4de4-aa5b-d41848cd9c1a",
      "Name": "Username",
      "Label": "Username",
      "HelpText": "Pass-through authentication username",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "139bfc70-0a4b-485f-8ea3-56ff02d0e7d2",
      "Name": "Password",
      "Label": "Password",
      "HelpText": "Pass-through authentication password",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "fe23ad0f-9ec9-4b01-aa0e-8180db6c2639",
      "Name": "iisSiteID",
      "Label": "",
      "HelpText": null,
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "668d1c10-5028-433e-aa29-ed5cacf7d3f7",
      "Name": "ApplicationPoolName",
      "Label": "Application pool name",
      "HelpText": "The name of the application pool that the application will run under.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "$Meta": {
    "ExportedAt": "2019-07-10T15:07:46.647Z",
    "OctopusVersion": "2018.7.11",
    "Type": "ActionTemplate"
  }
}